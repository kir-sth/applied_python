from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from app.services.water_service import WaterService
from app.utils.exceptions import ValidationError
import logging


class WaterStates(StatesGroup):
    waiting_for_amount = State()


router = Router()
logger = logging.getLogger(__name__)


@router.message(Command("log_water"))
async def cmd_water(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /water"""
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–∏—Ç–æ–π –≤–æ–¥—ã –≤ –º–∏–ª–ª–∏–ª–∏—Ç—Ä–∞—Ö (–º–ª).\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 250"
    )
    await state.set_state(WaterStates.waiting_for_amount)


@router.message(WaterStates.waiting_for_amount)
async def process_water_amount(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–æ–¥—ã"""
    try:
        # –ü—Ä–æ–±—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —á–∏—Å–ª–æ
        try:
            amount = int(message.text)
        except ValueError:
            await message.answer(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: 250"
            )
            return

        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å –∏ –ª–æ–≥–∏—Ä—É–µ–º –≤–æ–¥—É
        water_service = WaterService()
        await water_service.log_water(message.from_user.id, amount)

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ –¥–µ–Ω—å
        consumed, target = await water_service.get_daily_progress(
            message.from_user.id
        )

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        remaining = max(0, target - consumed)
        progress_message = (
            f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: {amount} –º–ª\n\n"
            f"–ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n"
            f"üö∞ –í—ã–ø–∏—Ç–æ –≤–æ–¥—ã: {consumed} –∏–∑ {target} –º–ª\n"
            f"üíß –û—Å—Ç–∞–ª–æ—Å—å –≤—ã–ø–∏—Ç—å: {remaining} –º–ª"
        )

        await message.answer(progress_message)
        logger.info(
            f"Water logged for user {message.from_user.id}: {amount} ml"
        )

    except ValidationError as e:
        await message.answer(str(e))
        logger.warning(
            f"Validation error for user {message.from_user.id}: {str(e)}"
        )

    except Exception as e:
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤–æ–¥—ã. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        logger.error(
            f"Error processing water for user {
                message.from_user.id}: {str(e)}",
            exc_info=True
        )

    finally:
        await state.clear()
