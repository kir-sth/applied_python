from app.db.database import async_session_maker
from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from app.services.food_service import FoodService


class FoodStates(StatesGroup):
    waiting_for_food = State()
    waiting_for_portion = State()


router = Router()


@router.message(Command("log_food"))
async def cmd_food(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏"""
    await message.answer(
        "üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–ª–∏ –±–ª—é–¥–∞.\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: —è–±–ª–æ–∫–æ, –æ–≤—Å—è–Ω–∫–∞, –π–æ–≥—É—Ä—Ç\n\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel"
    )
    await state.set_state(FoodStates.waiting_for_food)


@router.message(FoodStates.waiting_for_food)
async def process_food_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞"""
    try:
        if message.text.startswith('/'):
            await state.clear()
            await message.answer("–ü–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω")
            return

        async with async_session_maker() as session:
            food_service = FoodService(session=session)
            food_items = await food_service.search_food(message.text)

            if not food_items:
                await message.answer(
                    "‚ùå –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.\n"
                    "–ù–∞–ø—Ä–∏–º–µ—Ä: –º–æ–ª–æ–∫–æ, —Ö–ª–µ–±, –±–∞–Ω–∞–Ω"
                )
                return

            await state.update_data(
                food_items=food_items,
                selected_food=food_items[0]
            )

            food = food_items[0]
            nutritional_info = (
                f"üìã –ù–∞–π–¥–µ–Ω –ø—Ä–æ–¥—É–∫—Ç: {food['name']}\n"
                f"üî∏ –ö–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å: {food['calories']:.1f} –∫–∫–∞–ª/100–≥\n"
                f"üî∏ –ë–µ–ª–∫–∏: {food.get('proteins', 0):.1f} –≥\n"
                f"üî∏ –ñ–∏—Ä—ã: {food.get('fats', 0):.1f} –≥\n"
                f"üî∏ –£–≥–ª–µ–≤–æ–¥—ã: {food.get('carbs', 0):.1f} –≥\n\n"
                "‚öñÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –ø–æ—Ä—Ü–∏–∏ –≤ –≥—Ä–∞–º–º–∞—Ö (1-2000):"
            )

            await message.answer(nutritional_info)
            await state.set_state(FoodStates.waiting_for_portion)

    except Exception:
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–æ–¥—É–∫—Ç–∞.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        await state.clear()


@router.message(FoodStates.waiting_for_portion)
async def process_portion(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ—Ä—Ü–∏–∏"""
    try:
        if message.text.startswith('/'):
            await state.clear()
            await message.answer("–ó–∞–ø–∏—Å—å –ø—Ä–æ–¥—É–∫—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
            return

        try:
            portion = float(message.text)
            if portion <= 0 or portion > 2000:
                await message.answer(
                    "‚ö†Ô∏è –†–∞–∑–º–µ—Ä –ø–æ—Ä—Ü–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 2000 –≥—Ä–∞–º–º.\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:"
                )
                return
        except ValueError:
            await message.answer(
                "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: 100"
            )
            return

        user_data = await state.get_data()
        selected_food = user_data['selected_food']
        calories = (selected_food['calories'] * portion) / 100

        async with async_session_maker() as session:
            food_service = FoodService(session=session)
            await food_service.log_food(
                user_id=message.from_user.id,
                food_name=selected_food['name'],
                portion=portion,
                calories=calories
            )

            consumed, target = await food_service.get_daily_progress(message.from_user.id)  # noqa: E501

            remaining = max(0, target - consumed)
            progress_percentage = min(100, (consumed / target) * 100)

            await message.answer(
                f"‚úÖ –ü—Ä–æ–¥—É–∫—Ç –∑–∞–ø–∏—Å–∞–Ω!\n\n"
                f"üìä –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n"
                f"–°—ä–µ–¥–µ–Ω–æ: {consumed:.0f} –∫–∫–∞–ª\n"
                f"–û—Å—Ç–∞–ª–æ—Å—å: {remaining:.0f} –∫–∫–∞–ª\n"
                f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_percentage:.1f}%"
            )
            await state.clear()

    except Exception:
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        await state.clear()
