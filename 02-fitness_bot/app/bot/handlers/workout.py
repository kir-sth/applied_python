from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from app.db.database import async_session_maker
from app.services.workout_service import WorkoutService
from app.schemas.workout import WorkoutCreate

router = Router()

WORKOUT_TYPES = {
    "1": "–ë–µ–≥",
    "2": "–•–æ–¥—å–±–∞",
    "3": "–í–µ–ª–æ—Å–∏–ø–µ–¥",
    "4": "–ü–ª–∞–≤–∞–Ω–∏–µ",
    "5": "–°–∏–ª–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞",
    "6": "–ô–æ–≥–∞",
    "7": "–î—Ä—É–≥–æ–µ"
}

INTENSITY_LEVELS = {
    "1": "low",
    "2": "medium",
    "3": "high"
}


class WorkoutStates(StatesGroup):
    waiting_for_type = State()
    waiting_for_duration = State()
    waiting_for_intensity = State()


@router.message(Command("log_workout"))
async def cmd_log_workout(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    workout_types = "\n".join([f"{k}. {v}" for k, v in WORKOUT_TYPES.items()])
    await message.answer(
        "üèÉ‚Äç‚ôÇÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (–≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä):\n\n"
        f"{workout_types}\n\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel"
    )
    await state.set_state(WorkoutStates.waiting_for_type)


@router.message(WorkoutStates.waiting_for_type)
async def process_workout_type(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏–ø–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    if message.text.startswith('/'):
        await state.clear()
        await message.answer("–ó–∞–ø–∏—Å—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        return

    if message.text not in WORKOUT_TYPES:
        await message.answer(
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞ (1-7):"
        )
        return

    workout_type = WORKOUT_TYPES[message.text]
    await state.update_data(workout_type=workout_type)

    await message.answer(
        "‚è± –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö (1-300):"
    )
    await state.set_state(WorkoutStates.waiting_for_duration)


@router.message(WorkoutStates.waiting_for_duration)
async def process_duration(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    try:
        if message.text.startswith('/'):
            await state.clear()
            await message.answer("–ó–∞–ø–∏—Å—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞")
            return

        try:
            duration = int(message.text)
            if duration < 1 or duration > 300:
                await message.answer(
                    "‚ö†Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 300 –º–∏–Ω—É—Ç.\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:"
                )
                return
        except ValueError:
            await message.answer(
                "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: 30"
            )
            return

        await state.update_data(duration=duration)
        await message.answer(
            "üí™ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:\n"
            "1. –ù–∏–∑–∫–∞—è\n"
            "2. –°—Ä–µ–¥–Ω—è—è\n"
            "3. –í—ã—Å–æ–∫–∞—è"
        )
        await state.set_state(WorkoutStates.waiting_for_intensity)

    except Exception:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()


@router.message(WorkoutStates.waiting_for_intensity)
async def process_intensity(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    try:
        if message.text.startswith('/'):
            await state.clear()
            await message.answer("–ó–∞–ø–∏—Å—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞")
            return

        if message.text not in INTENSITY_LEVELS:
            await message.answer(
                "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å (1-3):"
            )
            return

        intensity = INTENSITY_LEVELS[message.text]
        user_data = await state.get_data()

        async with async_session_maker() as session:
            workout_service = WorkoutService(session)
            calories_burned = workout_service.calculate_calories_burned(
                user_data['workout_type'],
                user_data['duration'],
                intensity
            )

            workout_data = WorkoutCreate(
                user_id=message.from_user.id,
                workout_type=user_data['workout_type'],
                duration=user_data['duration'],
                intensity=intensity,
                calories_burned=calories_burned
            )

            await workout_service.log_workout(workout_data)
            daily_stats = await workout_service.get_daily_stats(
                message.from_user.id
            )

            await message.answer(
                f"‚úÖ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞–ø–∏—Å–∞–Ω–∞!\n\n"
                f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n"
                f"üèÉ‚Äç‚ôÇÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: {user_data['workout_type']}\n"
                f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {user_data['duration']} –º–∏–Ω\n"
                f"üî• –°–æ–∂–∂–µ–Ω–æ –∫–∞–ª–æ—Ä–∏–π: {calories_burned} –∫–∫–∞–ª\n\n"
                f"–í—Å–µ–≥–æ –∑–∞ –¥–µ–Ω—å:\n"
                f"‚ö°Ô∏è –°–æ–∂–∂–µ–Ω–æ: {daily_stats.total_burned} –∫–∫–∞–ª\n"
                f"üéØ –°—ä–µ–¥–µ–Ω–æ: {daily_stats.calories_consumed} –∫–∫–∞–ª\n"
                f"‚≠êÔ∏è –ë–∞–ª–∞–Ω—Å: {daily_stats.calories_remaining} –∫–∫–∞–ª\n"
                f"üèãÔ∏è‚Äç‚ôÇÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {daily_stats.workout_count}"
            )

            await state.clear()

    except Exception:
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        await state.clear()
